name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Cache cargo-edit
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.cargo/bin/cargo-set-version
          key: ${{ runner.os }}-cargo-edit-0.12.0

      - name: Install cargo-edit
        run: cargo install cargo-edit || true

      - name: Bump version
        run: |
          cargo set-version --bump ${{ inputs.version_bump }}
          NEW_VERSION=$(grep -m1 '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Bumped version to: $NEW_VERSION"

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch and commit
        run: |
          BRANCH_NAME="release/v${{ env.NEW_VERSION }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b "$BRANCH_NAME"
          git add Cargo.toml Cargo.lock
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "chore: release v${{ env.NEW_VERSION }}" \
            --body "Automated release PR for version ${{ env.NEW_VERSION }}" \
            --base main \
            --head "${{ env.BRANCH_NAME }}")
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]*$')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      - name: Wait for CI to pass
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for CI checks to complete on PR #${{ env.PR_NUMBER }}..."
          gh pr checks "${{ env.PR_NUMBER }}" --watch --interval 30

      - name: Approve PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr review "${{ env.PR_NUMBER }}" --approve